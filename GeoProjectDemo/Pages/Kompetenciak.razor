@page "/kompetenciak"

@using GeoProjectDemo.Components
@using System.Dynamic
@using Telerik.DataSource
@inject KompetenciaService KompetenciaService

<div class="view-size-page">

    <div class="kompetenciak-header">
        <h2>Kompetenciák</h2>
        <TelerikMultiSelect Data="@Kategoriak" ValueField="Azonosito" TextField="Nev"
                            Value="@SelectedKategoriak"
                            ValueChanged="@( (List<long> v) => SelectedKategoriakChanged(v) )"
                            Placeholder="Válassz ki kategóriákat" Filterable="true"
                            Width="600px" ClearButton="true" AutoClose="false">
        </TelerikMultiSelect>
    </div>


    @if ( Dolgozok == null )
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <TelerikGrid Data="@Dolgozok" class="kompetencia-grid smallerFont"
                     Resizable="true"
                     Pageable="false" Sortable="true" Reorderable="false"
                     EditMode="@GridEditMode.Popup"
                     FilterMode="Telerik.Blazor.GridFilterMode.FilterMenu">
            <GridColumns>
                <GridColumn Title="Név" Field="Nev" FieldType="typeof(string)" Width="100px" Locked="true" />
                <GridColumn Width="42px" FieldType="typeof(string)">
                    <Template>
                        @{
                            var azon = ( (ExpandoObject)context ).FirstOrDefault( x => x.Key == "Azonosito" ).Value;
                            string roles = $"user{azon}, admin";
                            <AuthorizeView Roles="@roles">
                                <Authorized Context="authContext">
                                    <TelerikButton Icon="edit" OnClick="@(e => Edit(context as ExpandoObject))"></TelerikButton>
                                </Authorized>
                                <NotAuthorized Context="notAuthContext">
                                    <TelerikButton Icon="edit" Enabled="false"></TelerikButton>
                                </NotAuthorized>

                            </AuthorizeView>
                        }
                    </Template>
                </GridColumn>
                @foreach ( var komp in KompetenciaList )
                {
                    <GridColumn Field="@komp.PropertyNev" FieldType="typeof(string)"
                                Width="150px" Filterable="true" Sortable="true" Visible="@komp.IsVisible">
                        <HeaderTemplate>
                            <CustomGroupHeader ColumnName="@komp.Nev" IsFirst="@komp.IsFirstInGroup"
                                               ColumnGroupName="@KategoriaDict[komp.KategoriaAzonosito]" />
                        </HeaderTemplate>
                        <FilterMenuTemplate>
                            @{
                                theFilterContext[ komp.PropertyNev ] = context;
                            }

                            @foreach ( var szint in Szintek )
                            {
                                <div>
                                    <TelerikCheckBox Value="@(IsCheckboxInCurrentFilter(context.FilterDescriptor, szint))"
                                                     TValue="bool"
                                                     ValueChanged="@((value) => UpdatecheckedSzintek(value, szint, komp.PropertyNev))"
                                                     Id="@($"szint_{szint}")">
                                    </TelerikCheckBox>
                                    <label for=" @($"szint_{szint}")">
                                        @szint
                                    </label>
                                </div>
                            }
                        </FilterMenuTemplate>
                    </GridColumn>
                }
            </GridColumns>
        </TelerikGrid>

        <TelerikWindow @bind-Visible="@EditWindowIsVisible" Modal="true">
            <WindowTitle>
                @{ 
                    string title = ( EditedDolgozo as IDictionary<string, object> )[ "Nev" ].ToString( );
                } 
                <strong>@title</strong>
            </WindowTitle>
            <WindowContent>
                <KompetenciaEditModal Dolgozo="EditedDolgozo" Kompetenciak="KompetenciaList" Szintek="Szintek" />
                <div class="window-bottom">
                    <TelerikButton class="button-primary" Icon="save" OnClick="SaveEdit">Mentés</TelerikButton>
                </div>
            </WindowContent>
            <WindowActions>
                <WindowAction Name="Close"></WindowAction>
            </WindowActions>
        </TelerikWindow>

    }
</div>

<style>

    .window-bottom {
        border-top: grey;
        border-top-style: solid;
        border-top-width: 1px;
        margin-top: 10px;
        padding-top: 10px;
    }

    .button-primary {
        float: right;
    }

</style>

@code {

    TelerikMultiSelect<string, string> KategoriaSelect { get; set; }

    Dictionary<string, FilterMenuTemplateContext> theFilterContext { get; set; }
    Dictionary<string, List<string>> checkedSzintek { get; set; }

    public Dictionary<long?, string> KategoriaDict { get; set; } = new Dictionary<long?, string>( );
    public List<string> Szintek;
    private List<ExpandoObject> Dolgozok;
    public List<Kompetencia> KompetenciaList = new List<Kompetencia>( );
    public List<KompetenciaKategoria> Kategoriak { get; set; } = new List<KompetenciaKategoria>( );
    public List<long> SelectedKategoriak { get; set; }

    public bool EditWindowIsVisible { get; set; } = false;
    public ExpandoObject EditedDolgozo { get; set; }

    protected override async Task OnAfterRenderAsync( bool first )
    {
        if ( !first )
            return;

        var res = await KompetenciaService.GetAdatok( );
        Szintek = res.Szintek;
        KompetenciaList = res.Kompetenciak;
        Dolgozok = res.Dolgozok;
        Kategoriak = res.Kategoriak;

        Kategoriak.ForEach( k => KategoriaDict.Add( k.Azonosito, k.Nev ) );
        SelectedKategoriak = Kategoriak.Select( k => k.Azonosito ).ToList( );

        theFilterContext = new Dictionary<string, FilterMenuTemplateContext>( );
        checkedSzintek = new Dictionary<string, List<string>>( );
        KompetenciaList.ForEach( x =>
        {
            theFilterContext.Add( x.PropertyNev, new FilterMenuTemplateContext( ) );
            checkedSzintek.Add( x.PropertyNev, new List<string>( ) );
        } );

        StateHasChanged( );
    }



    public bool IsCheckboxInCurrentFilter( CompositeFilterDescriptor filterDescriptor, string size )
    {
        var a = filterDescriptor.FilterDescriptors.Select( f => ( f as FilterDescriptor ).Value?.ToString( ) ).ToList( );
        // get all current filter descriptors and evaluate whether to select the current checkbox
        return filterDescriptor.FilterDescriptors.Select( f => ( f as FilterDescriptor ).Value?.ToString( ) ).ToList( ).Contains( size );
    }

    public void UpdatecheckedSzintek( bool value, string itemValue, string komp )
    {
        // update the list of items we want to filter by
        var isSizeChecked = checkedSzintek[ komp ].Contains( itemValue );
        if ( value && !isSizeChecked )
        {
            checkedSzintek[ komp ].Add( itemValue );
        }

        if ( !value && isSizeChecked )
        {
            checkedSzintek[ komp ].Remove( itemValue );
        }

        // prepare filter descriptor
        var filterDescriptor = theFilterContext[ komp ].FilterDescriptor;

        filterDescriptor.FilterDescriptors.Clear( );
        // use the OR logical operator so we include all possible values
        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;
        checkedSzintek[ komp ].ForEach( s =>
            // instantiate a filter descriptor for the desired field, and with the desired operator and value
            filterDescriptor.FilterDescriptors.Add( new FilterDescriptor( komp, FilterOperator.IsEqualTo, s ) )
        );

        //ensure there is at least one blank filter to avoid null reference exceptions
        if ( !filterDescriptor.FilterDescriptors.Any( ) )
        {
            filterDescriptor.FilterDescriptors.Add( new FilterDescriptor( ) );
        }
    }

    void SelectedKategoriakChanged( List<long> values )
    {
        SelectedKategoriak = values;
        KompetenciaList.ForEach( k => k.IsVisible = SelectedKategoriak.Contains( (long)k.KategoriaAzonosito ) );
    }

    void Edit(ExpandoObject dolgozoKompetenciak)
    {
        var cloned = CopyHelper.ShallowCopyExpando( dolgozoKompetenciak );
        EditedDolgozo = cloned;
        EditWindowIsVisible = true;
    }

    public void SaveEdit()
    {
        var dolgozo = EditedDolgozo as IDictionary<string, object>;
        var ind = Dolgozok
            .FindIndex( d => ( d as IDictionary<string, object> )[ "Azonosito" ] == dolgozo[ "Azonosito" ] );

        var dolgozoDict = Dolgozok[ ind ] as IDictionary<string, object>;
        foreach ( Kompetencia komp in KompetenciaList )
            dolgozoDict[ komp.PropertyNev ] = dolgozo[ komp.PropertyNev ];

        EditWindowIsVisible = false;
        StateHasChanged( );
    }

}
