@page "/kompetenciak"

@using System.Dynamic
@using Telerik.DataSource

<div class="view-size-page">

    <div class="kompetenciak-header">
        <h2>Kompetenciák</h2>


        <TelerikMultiSelect Data="@Kategoriak" ValueField="Azonosito" TextField="Nev"
                            Value="@SelectedKategoriak" Class="multi-select"
                            ValueChanged="@( (List<long> v) => SelectedKategoriakChanged(v) )"
                            Placeholder="Válassz ki kategóriákat" Filterable="true"
                            Width="600px" ClearButton="true" AutoClose="false">
        </TelerikMultiSelect>
        <TelerikButton Class="excel-button" Icon="@IconName.FileExcel" OnClick="@(e => ExcelExport())"></TelerikButton>
    </div>


    @if ( Dolgozok == null )
    {
        <p><em>Adatok betöltése...</em></p>
    }
    else
    {

        <TelerikGrid Data="@Dolgozok" class="kompetencia-grid smallerFont"
                     Resizable="true"
                     Pageable="false" Sortable="true" Reorderable="false"
                     EditMode="@GridEditMode.Popup"
                     FilterMode="Telerik.Blazor.GridFilterMode.FilterMenu">
            <GridColumns>
                <GridColumn Title="Név" Field="Nev" FieldType="typeof(string)" Width="100px" Locked="true" />
                <GridColumn Width="42px" FieldType="typeof(string)">
                    <Template>
                        @{
                            var azon = ( (ExpandoObject)context ).FirstOrDefault( x => x.Key == "Azonosito" ).Value;
                            string roles = $"user{azon}, admin";
                            <AuthorizeView Roles="@roles">
                                <Authorized Context="authContext">
                                    <TelerikButton Icon="edit" OnClick="@(e => Edit(context as ExpandoObject))"></TelerikButton>
                                </Authorized>
                                <NotAuthorized Context="notAuthContext">
                                    <TelerikButton Icon="edit" Enabled="false"></TelerikButton>
                                </NotAuthorized>

                            </AuthorizeView>
                        }
                    </Template>
                </GridColumn>
                @foreach ( var komp in KompetenciaList )
                {
                    <GridColumn Field="@komp.PropertyNev" FieldType="typeof(string)"
                                Width="150px" Filterable="true" Sortable="true" Visible="@komp.IsVisible">
                        <HeaderTemplate>
                            <CustomGroupHeader ColumnName="@komp.Nev" IsFirst="@komp.IsFirstInGroup"
                                               ColumnGroupName="@KategoriaDict[komp.KategoriaAzonosito]" />
                        </HeaderTemplate>
                        <FilterMenuTemplate>
                            @{
                                theFilterContext[ komp.PropertyNev ] = context;
                            }

                            @foreach ( var szint in Szintek )
                            {
                                <div>
                                    <TelerikCheckBox Value="@(IsCheckboxInCurrentFilter(context.FilterDescriptor, szint))"
                                                     TValue="bool" Id="@($"szint_{szint}")"
                                                     ValueChanged="@((value) => UpdatecheckedSzintek(value, szint, komp.PropertyNev))">
                                    </TelerikCheckBox>
                                    <label for=" @($"szint_{szint}")">
                                        @szint
                                    </label>
                                </div>
                            }
                        </FilterMenuTemplate>
                    </GridColumn>
                }
            </GridColumns>
        </TelerikGrid>

        <TelerikWindow @bind-Visible="@EditWindowIsVisible" Modal="true">
            <WindowTitle>
                @{ 
                    string title = ( EditedDolgozo as IDictionary<string, object> )[ "Nev" ].ToString( );
                } 
                <strong>@title</strong>
            </WindowTitle>
            <WindowContent>
                <KompetenciaEditModal Dolgozo="EditedDolgozo" Kompetenciak="KompetenciaList" Szintek="Szintek" />
                <div class="popup-window-bottom">
                    <TelerikButton class="button-primary" Icon="save" OnClick="SaveEdit">Mentés</TelerikButton>
                </div>
            </WindowContent>
            <WindowActions>
                <WindowAction Name="Close"></WindowAction>
            </WindowActions>
        </TelerikWindow>

    }
</div>

<style>

    .kompetencia-grid {
        display: contents !important;
    }

    .kompetenciak-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-bottom: 14px;
        height: 56px;
    }

    .button-primary {
        float: right;
    }

    .multi-select {
        margin-left: auto;
        margin-right: 10px;
    }

    /*CustomGroupHeader dolgai*/
    .cut-text {
        text-overflow: ellipsis;
        overflow: hidden;
        width: calc(100% - 26px);
        height: 1.2em;
        white-space: nowrap;
    }

    .aquip-k-grid-group-head-base {
        margin-left: -12px;
        margin-right: -12px;
        margin-top: -8px;
        margin-bottom: -10px;
        padding-top: 8px;
        padding-bottom: 8px;
        background: inherit;
        color: transparent;
    }

    .aquip-k-grid-group-head-first {
        border-left-color: inherit;
        border-left-style: solid;
        border-left-width: 1px;
        border-color: rgba(0, 0, 0, 0.08);
        color: inherit;
        text-align: start;
        padding-left: 4px;
        z-index: 1;
        position: absolute;
        top: 7px;
        height: 10px;
        background: #f6f6f6 !important;
    }

    .aquip-k-grid-group-underhead-base {
        margin-left: -12px;
        margin-right: -12px;
        margin-top: -10px;
        margin-bottom: -8px;
        padding-top: 8px;
        padding-bottom: 8px;
        padding-left: 4px;
        border-top-color: inherit;
        border-top-style: solid;
        border-top-width: 1px;
        border-left-color: inherit;
        border-left-style: solid;
        border-left-width: 1px;
        border-color: rgba(0, 0, 0, 0.08);
        background: inherit;
        color: inherit;
    }

    .aquip-k-grid-group-underhead-ungrouped {
        border-top-color: transparent;
    }

    .k-grid th {
        border-left-style: none;
    }

    .k-grid-header {
        max-height: 59px !important;
    }

    .k-grid-header th.k-header {
        overflow: visible !important
    }

    .k-grid th.k-header .k-icon.k-i-sort-asc-sm,
    .k-grid th.k-header .k-icon.k-i-sort-desc-sm {
        position: absolute;
        right: 25px;
        bottom: 8px;
    }

    .k-button.excel-button {
        width: 36px;
        height: 36px;
        border-color: rgb(147, 220, 105) !important;
        color: #ffffff;
        background-color: rgb(147, 220, 105) !important;
        background-image: linear-gradient(90deg, rgba(135,210,95,1) 0%, rgba(147,220,105,1) 35%, rgba(157,230,115,1) 100%);
    }

    .excel-button .k-icon,
    .excel-button .k-icon::before {
        width: 32px;
        height: 32px;
        font-size: 32px;
    }


</style>

@code {

    Dictionary<string, FilterMenuTemplateContext> theFilterContext { get; set; }
    Dictionary<string, List<string>> checkedSzintek { get; set; }

    protected void SetFilterContext(List<Kompetencia> kompetenciak)
    {
        theFilterContext = new Dictionary<string, FilterMenuTemplateContext>( );
        checkedSzintek = new Dictionary<string, List<string>>( );
        kompetenciak.ForEach( x =>
        {
            theFilterContext.Add( x.PropertyNev, new FilterMenuTemplateContext( ) );
            checkedSzintek.Add( x.PropertyNev, new List<string>( ) );
        } );
    }



    public bool IsCheckboxInCurrentFilter( CompositeFilterDescriptor filterDescriptor, string size )
    {
        var a = filterDescriptor.FilterDescriptors.Select( f => ( f as FilterDescriptor ).Value?.ToString( ) ).ToList( );
        // get all current filter descriptors and evaluate whether to select the current checkbox
        return filterDescriptor.FilterDescriptors.Select( f => ( f as FilterDescriptor ).Value?.ToString( ) ).ToList( ).Contains( size );
    }

    public void UpdatecheckedSzintek( bool value, string itemValue, string komp )
    {
        // update the list of items we want to filter by
        var isSizeChecked = checkedSzintek[ komp ].Contains( itemValue );
        if ( value && !isSizeChecked )
        {
            checkedSzintek[ komp ].Add( itemValue );
        }

        if ( !value && isSizeChecked )
        {
            checkedSzintek[ komp ].Remove( itemValue );
        }

        // prepare filter descriptor
        var filterDescriptor = theFilterContext[ komp ].FilterDescriptor;

        filterDescriptor.FilterDescriptors.Clear( );
        // use the OR logical operator so we include all possible values
        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;
        checkedSzintek[ komp ].ForEach( s =>
            // instantiate a filter descriptor for the desired field, and with the desired operator and value
            filterDescriptor.FilterDescriptors.Add( new FilterDescriptor( komp, FilterOperator.IsEqualTo, s ) )
        );

        //ensure there is at least one blank filter to avoid null reference exceptions
        if ( !filterDescriptor.FilterDescriptors.Any( ) )
        {
            filterDescriptor.FilterDescriptors.Add( new FilterDescriptor( ) );
        }
    }

    

}
